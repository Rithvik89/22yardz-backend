// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id             Int                  @id @default(autoincrement()) @db.Int
  mail_id             String               @unique
  password            String?
  created_at          DateTime             @default(now())
  identity_provider   String?
  subject_id          String?
  Notification        Notifications[]
  Profile             Profile?
  Token               Token[]
  Post                Posts[]
  Likes               Likes[]
  ParentComments      ParentComments[]
  ChildComments       ChildComments[]
  Favourites          Favourites[]
  PostRecommendations PostRecommendations?
  Following           Networks[]           @relation("following")
  Followers           Networks[]           @relation("followers")
  Recommendations     UserRecommendations?
  Feedback            Feedback?
  @@map("users")
}

model Notifications {
  id         BigInt             @id @default(autoincrement()) @db.BigInt
  for        Users              @relation(fields: [for_id], references: [user_id])
  for_id     Int
  status     NotificationStatus
  metadata   Json
  created_at DateTime           @default(now())

  @@map("notifications")
}

model Profile {
  user              Users    @relation(fields: [user_id], references: [user_id])
  user_id           Int      @unique
  username          String   @unique
  email_id          String
  profile_image_uri String?  @default("https://22yards-image-bucket.s3.ap-south-1.amazonaws.com/sjFmewfzjI.webp")
  bio               String?
  cric_index        Int      @default(0)
  updated_at        DateTime @updatedAt
  following         Int      @default(0)
  followers         Int      @default(0)
  interests         String?

  @@map("profiles")
}

model Networks {
  id           BigInt @id @default(autoincrement()) @db.BigInt
  follower     Users  @relation("followers", fields: [follower_id], references: [user_id])
  follower_id  Int
  following    Users  @relation("following", fields: [following_id], references: [user_id])
  following_id Int

  @@unique([follower_id, following_id])
  @@map("networks")
}

model Token {
  screen_id  BigInt    @id @default(autoincrement()) @db.BigInt
  user       Users     @relation(fields: [user_id], references: [user_id])
  user_id    Int
  token_id   String
  created_at DateTime  @default(now())
  expired_at DateTime?

  @@unique([user_id, token_id])
  @@map("token")
}

model Posts {
  user           Users            @relation(fields: [user_id], references: [user_id])
  user_id        Int
  post_id        BigInt           @id @default(autoincrement()) @db.BigInt
  content        String?
  media          String?
  is_private     Boolean          @default(false)
  original       Posts?           @relation("SharedRelation", fields: [original_id], references: [post_id], onDelete: Cascade)
  original_id    BigInt?
  ToShared       Posts[]          @relation("SharedRelation")
  edits          Int              @default(0)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  Likes          Likes[]
  ParentComments ParentComments[]
  Favourites     Favourites[]

  @@unique([user_id, post_id])
  @@map("posts")
}

model Likes {
  user    Users @relation(fields: [user_id], references: [user_id])
  user_id Int

  post    Posts  @relation(fields: [post_id], references: [post_id])
  post_id BigInt

  type       Int
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
  @@map("likes")
}

model ParentComments {
  comment_id BigInt @id @default(autoincrement()) @db.BigInt
  user       Users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id    Int

  post    Posts  @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  post_id BigInt

  content       String
  created_at    DateTime        @default(now())
  ChildComments ChildComments[]

  @@map("parent_comments")
}

model ChildComments {
  comment_id BigInt @id @default(autoincrement()) @db.BigInt
  user       Users  @relation(fields: [user_id], references: [user_id])
  user_id    Int

  parentComment     ParentComments @relation(fields: [parent_comment_id], references: [comment_id], onDelete: Cascade)
  parent_comment_id BigInt

  content    String
  created_at DateTime @default(now())

  @@map("child_comments")
}

model Favourites {
  user    Users  @relation(fields: [user_id], references: [user_id])
  user_id Int
  post    Posts  @relation(fields: [post_id], references: [post_id])
  post_id BigInt

  @@unique([user_id, post_id])
  @@map("favourites")
}

model PostRecommendations {
  user                 Users  @relation(fields: [user_id], references: [user_id])
  user_id              Int    @unique
  post_recommendations String

  @@map("postRecommendations")
}

model UserRecommendations {
  user      Users  @relation(fields: [user_id], references: [user_id])
  user_id   Int    @unique
  recommend String

  @@map("user_recommendations")
}

model Feedback {
  user           Users            @relation(fields: [user_id], references: [user_id])
  user_id        Int              @unique
  image_uri String?  
  content String

  @@map("feedback")
}
enum NotificationStatus {
  Unseen
  Seen
  Read
}
