// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id           Int             @id @default(autoincrement()) @db.Int
  mail_id           String          @unique
  password          String?
  created_at        DateTime        @default(now())
  identity_provider String?
  subject_id        String?
  Notification      Notifications[]
  Profile           Profile?
  Token             Token[]
  Following         Networks[]   @relation("following")
  Followers         Networks[]   @relation("followers")
  Recommendations   Recommendations?

  @@map("users")
}

model Notifications {
  id         BigInt             @id @default(autoincrement()) @db.BigInt
  for        Users              @relation(fields: [for_id], references: [user_id])
  for_id     Int
  status     NotificationStatus
  metadata   Json
  created_at DateTime           @default(now())

  @@map("notifications")
}


model Profile {
  user              Users    @relation(fields: [user_id], references: [user_id])
  user_id           Int      @unique
  username          String   @unique
  email_id          String  
  profile_image_uri String?  @default("https://22yards-image-bucket.s3.ap-south-1.amazonaws.com/sjFmewfzjI.webp")
  bio               String?  
  cric_index        Int      @default(0)
  updated_at        DateTime @updatedAt
  following         Int      @default(0)
  followers         Int      @default(0)
  interests         String?

  @@map("profiles")
}

model Networks{
  id         BigInt      @id @default(autoincrement()) @db.BigInt
  follower     Users     @relation("followers",fields: [follower_id], references: [user_id])
  follower_id  Int
  following   Users     @relation("following",fields: [following_id], references: [user_id])
  following_id Int

  @@unique([follower_id,following_id])
 
  @@map("networks")
}

model Token {
  screen_id  BigInt   @id @default(autoincrement()) @db.BigInt
  user       Users    @relation(fields: [user_id], references: [user_id])
  user_id    Int
  token_id   String
  created_at DateTime @default(now())
  expired_at DateTime?

  @@unique([user_id, token_id])
  @@map("token")
}

model Recommendations{
  user Users @relation(fields: [user_id], references: [user_id])
  user_id Int @unique
  recommend String

  @@map("recommendations")
}

enum NotificationStatus {
  Unseen
  Seen
  Read
}
